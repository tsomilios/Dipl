
// Include Libraries
#include "Arduino.h"
#include "DHT.h"
#include "DS18B20.h"
#include "LiquidCrystal.h"
#include "SolenoidValve.h"
#include "DFRobot_PH.h"
#include "DFRobot_EC.h"
#include <EEPROM.h>



// Pin Definitions
#define EC_PIN A1
#define PH_PIN A2
#define DHT_PIN_DATA	6
#define DS18B20WP_PIN_DQ	5
#define LCD_PIN_RS	52
#define LCD_PIN_E	50
#define LCD_PIN_DB4 42
#define LCD_PIN_DB5	44
#define LCD_PIN_DB6	46
#define LCD_PIN_DB7	48
#define SOLENOIDVALVE1_1_PIN_COIL1	2
#define SOLENOIDVALVE2_2_PIN_COIL1	3
#define SOLENOIDVALVE3_3_PIN_COIL1	4



// Global variables and defines

// object initialization
DHT dht(DHT_PIN_DATA);
DS18B20 ds18b20wp(DS18B20WP_PIN_DQ);
LiquidCrystal lcd(LCD_PIN_RS,LCD_PIN_E,LCD_PIN_DB4,LCD_PIN_DB5,LCD_PIN_DB6,LCD_PIN_DB7);
SolenoidValve solenoidValve1_1(SOLENOIDVALVE1_1_PIN_COIL1);
SolenoidValve solenoidValve2_2(SOLENOIDVALVE2_2_PIN_COIL1);
SolenoidValve solenoidValve3_3(SOLENOIDVALVE3_3_PIN_COIL1);
float voltage,phValue,temperature,ecValue,voltageEC;
DFRobot_PH ph;
DFRobot_EC ec;

// define vars for testing menu
const int timeout = 10000;       //define timeout of 10 sec

long time0;

// Setup the essentials for your circuit to work. It runs first every time your circuit is powered with electricity.
void setup() 
{
    // Setup Serial which is useful for debugging
    // Use the Serial Monitor to view printed messages
    //Serial.begin(9600);
    Serial.begin(115200); 
     
    while (!Serial) ; // wait for serial port to connect. Needed for native USB
    Serial.println("start");
    ph.begin();
    dht.begin();
    ec.begin();
    // set up the LCD's number of columns and rows
    lcd.begin(16, 2);
    
}

// Main logic of your circuit. It defines the interaction between the components you selected. After setup, it runs over and over again, in an eternal loop.
void loop() 
{
    
    char c = Serial.read();
    
    // LCD 16x2 - Test Code
    // Print a message to the LCD.
    
    lcd.setCursor(0, 0);
    float dhtHumidity = dht.readHumidity();
    float dhtTempC = dht.readTempC();
    lcd.print(F("Temp: .!. ")); lcd.print(dhtTempC); lcd.println(F("C"));
    lcd.setCursor(0 , 1 );
    lcd.print(F("Humidity: ")); lcd.print(dhtHumidity); lcd.print(F("%"));
    delay(5000);
    lcd.clear();

    lcd.setCursor(0, 0);
    float temperature = ds18b20wp.readTempC();
    voltage = analogRead(PH_PIN)/1024.0*5000;  // read the voltage
    phValue = ph.readPH(voltage,temperature);
    voltageEC = analogRead(EC_PIN)/1024.0*5000;
    ecValue    = ec.readEC(voltageEC,temperature);
    lcd.print(F("pH:     ")); lcd.print(phValue);
    lcd.setCursor(0 , 1 );
    lcd.print(F("EC  : ")); lcd.print(ecValue);
    delay(5000);
    lcd.clear();

    if(c == '1') {
        // DHT22/11 Humidity and Temperature Sensor - Test Code
        // Reading humidity in %
        float dhtHumidity = dht.readHumidity();
        // Read temperature in Celsius, for Fahrenheit use .readTempF()
        float dhtTempC = dht.readTempC();
        Serial.print(F("Humidity: ")); Serial.print(dhtHumidity); Serial.print(F(" [%]\t"));
        Serial.print(F("Temp: ")); Serial.print(dhtTempC); Serial.println(F(" [C]"));

    }
    else if(c == '2') {
        // DS18B20 1-Wire Temperature Sensor - Waterproof - Test Code
        // Read DS18B20 temp sensor value in degrees celsius. for degrees fahrenheit use ds18b20wp.ReadTempF()
        float ds18b20wpTempC = ds18b20wp.readTempC();
        Serial.print(F("Temp: ")); Serial.print(ds18b20wpTempC); Serial.println(F(" [C]"));

    }
    
    

    
    else if(c == '3') {
        // 12V Solenoid Valve - 3/4'' #1 - Test Code
        // The solenoid valve will turn on and off for 500ms (0.5 sec)
        solenoidValve1_1.on(); // 1. turns on
        delay(500);       // 2. waits 500 milliseconds (0.5 sec). Change the value in the brackets (500) for a longer or shorter delay in milliseconds.
        solenoidValve1_1.off();// 3. turns off
        delay(500);       // 4. waits 500 milliseconds (0.5 sec). Change the value in the brackets (500) for a longer or shorter delay in milliseconds.
        // 12V Solenoid Valve - 3/4'' #2 - Test Code
        // The solenoid valve will turn on and off for 500ms (0.5 sec)
        solenoidValve2_2.on(); // 1. turns on
        delay(500);       // 2. waits 500 milliseconds (0.5 sec). Change the value in the brackets (500) for a longer or shorter delay in milliseconds.
        solenoidValve2_2.off();// 3. turns off
        delay(500);       // 4. waits 500 milliseconds (0.5 sec). Change the value in the brackets (500) for a longer or shorter delay in milliseconds.
        // 12V Solenoid Valve - 3/4'' #3 - Test Code
        // The solenoid valve will turn on and off for 500ms (0.5 sec)
        solenoidValve3_3.on(); // 1. turns on
        delay(500);       // 2. waits 500 milliseconds (0.5 sec). Change the value in the brackets (500) for a longer or shorter delay in milliseconds.
        solenoidValve3_3.off();// 3. turns off
        delay(500);       // 4. waits 500 milliseconds (0.5 sec). Change the value in the brackets (500) for a longer or shorter delay in milliseconds.

    }
    else if(c == '4'){
     
        float temperature = ds18b20wp.readTempC();
        //Serial.print(F("Temp: ")); Serial.print(temperature); Serial.println(F(" [C]"));// read your temperature sensor to execute temperature compensation
        voltage = analogRead(PH_PIN)/1024.0*5000;  // read the voltage
        phValue = ph.readPH(voltage,temperature);  // convert voltage to pH with temperature compensation
        Serial.print("temperature:");
        Serial.print(temperature,1);
        Serial.print("^C  pH:");
        Serial.println(phValue,2);
        
    
    }

    else if(c == '5') {
           
    
        float temperature = ds18b20wp.readTempC();
        Serial.print(F("Temp: ")); Serial.print(temperature); Serial.println(F(" [C]"));// read your temperature sensor to execute temperature compensation
        
        voltageEC = analogRead(EC_PIN)/1024.0*5000;
        ecValue    = ec.readEC(voltageEC,temperature);       // convert voltage to EC with temperature compensation
        Serial.print(", EC:");
        Serial.print(ecValue,2);
        Serial.println("ms/cm");
    
    }
}






